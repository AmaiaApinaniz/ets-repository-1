<ExecutableTestSuite id="EID122b2f38-302f-4271-9653-69cf86fcb5c4" xmlns="http://www.interactive-instruments.de/etf/1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.interactive-instruments.de/etf/1.0 ../../schema/model/test.xsd">
	<label>Reference systems, Hydrography</label>
	<description><![CDATA[This test suite examines a data set against the theme-specific requirements related to reference systems (spatial and temporal, units of measurement).<br/><br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-hy/3.1/hy-rs">Conformance Class 'Reference systems, Hydrography'</a>]]></description>
	<version>0.1.0</version>
	<author>interactive instruments GmbH</author>
	<creationDate>2016-08-15T00:00:00Z</creationDate>
	<lastEditor>interactive instruments GmbH</lastEditor>
	<lastUpdateDate>2016-08-15T00:00:00Z</lastUpdateDate>
	<remoteResource>http://github.com/inspire-eu-validation/ets-repository/data-hy/hy-rs</remoteResource>
	<translationTemplateBundle ref="EID70a263c0-0ad7-42f2-9d4d-0d8a4ca71b52"/>
	<statisticalReportTableType>http://portele.de/EID8bb8f162-1082-434f-bd06-23d6507634b8.xml</statisticalReportTableType>
	<ParameterList name="ETF Standard Parameters for XML test objects">
		<parameter name="files_to_test" required="true">
			<defaultValue>.*</defaultValue>
			<description ref="TR.filesToTest"/>
			<allowedValues>.*</allowedValues>
			<type>string</type>
		</parameter>
		<parameter name="tests_to_execute" required="false">
			<defaultValue>.*</defaultValue>
			<description ref="TR.testsToExecute"/>
			<allowedValues>.*</allowedValues>
			<type>string</type>
		</parameter>
		<parameter name="maximum_number_of_error_messages_per_test" required="false">
			<defaultValue>100</defaultValue>
			<description ref="TR.limitMessages"/>
			<allowedValues>[1-9]+[0-9]*</allowedValues>
			<type>integer</type>
		</parameter>
	</ParameterList>
	<supportedTestObjectTypes>
	  <testObjectType ref="EIDe1d4a306-7a78-4a3b-ae2d-cf5f0810853e"/>
	</supportedTestObjectTypes>
	<Dependencies>
		<dependency>
			<dependsOn ref="EID63f586f0-080c-493b-8ca2-9919427440cc"/>
		</dependency>
	</Dependencies>
	<testModules>
	  <TestModule id="EID02e0157e-008e-4b4b-aa34-dfa9dd1fc722">
		 <parent ref="EID122b2f38-302f-4271-9653-69cf86fcb5c4"/>
		 <label>IGNORE</label>
		 <description>IGNORE</description>
		 <testCases>
			<TestCase id="EIDe66fd4bc-1154-41e5-9549-2e7bdb651229">
			  <parent ref="EID02e0157e-008e-4b4b-aa34-dfa9dd1fc722"/>
			  <label>Units of measure</label>
			  <description>Verify that measurements use an allowed unit.</description>
			  <testSteps>
				<TestStep id="EID177656c5-0871-4afb-b7f6-a50a774ce730">
					<parent ref="EIDe66fd4bc-1154-41e5-9549-2e7bdb651229"/>
					<label>IGNORE</label>
					<description>IGNORE</description>
					<statementForExecution>not applicable</statementForExecution>
					<type ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
					<testAssertions>
					  <TestAssertion id="EID211da09d-887d-4afa-b8a6-28f301084430">
						 <parent ref="EID177656c5-0871-4afb-b7f6-a50a774ce730"/>
						 <label>a.1: WatercourseLink.length</label>
						 <description><![CDATA[Verify that the property 'length' in WatercourseLink features has a length unit (meter or a derived unit). All references to a unit of measurement have to use one of the approved HTTP URIs (currently no approved HTTP URIs exist for units) or values from the UCUM dictionary.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 12 (2): Other Requirements and Rules. All measurement values shall be expressed using SI units or non-SI units accepted for use with the International System of Units, unless specified otherwise for a specific spatial data theme or type.</li></ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data/3.0rc3/reference-systems/spatial">Abstract Test Case 'Spatial reference systems'</a>]]></description>
						 <expectedResult/>
						 <expression>
let $units := ('m', 'mm', 'cm', 'dm', 'km')
let $featuresWithErrors := $features[self::*:WatercourseLink and *:length and not(*:length/@uom = $units)][position() le $limitErrors]
return
(if ($featuresWithErrors) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.featuresWithErrors', count($featuresWithErrors)),
 for $feature in $featuresWithErrors
   order by $feature/@gml:id
   let $uoms := fn:distinct-values($feature/*:length/@uom[not(. = $units)])
   return
     for $uom in $uoms return local:addMessage('TR.unknownUoM', map { 'filename': local:filename($feature), 'featureType': local-name($feature), 'gmlid': string($feature/@gml:id), 'property': 'length', 'uom': string($uom), 'allowedUoM' : string-join($units, ', ') }))
                   </expression>
						 <type ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
						 <translationTemplates>
							<translationTemplate ref="TR.unknownUoM"/>
							<translationTemplate ref="TR.featuresWithErrors"/>
						 </translationTemplates>
					  </TestAssertion>
					  <TestAssertion id="EID30dae4ae-396c-4cee-a99c-ea6952d88c2f">
						 <parent ref="EID177656c5-0871-4afb-b7f6-a50a774ce730"/>
						 <label>a.2: DrainageBasin.area</label>
						 <description><![CDATA[Verify that the property 'area' in DrainageBasin features has a area unit (square meter or a derived unit). All references to a unit of measurement have to use one of the approved HTTP URIs (currently no approved HTTP URIs exist for units) or values from the UCUM dictionary.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 12 (2): Other Requirements and Rules. All measurement values shall be expressed using SI units or non-SI units accepted for use with the International System of Units, unless specified otherwise for a specific spatial data theme or type.</li></ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data/3.0rc3/reference-systems/spatial">Abstract Test Case 'Spatial reference systems'</a>]]></description>
						 <expectedResult/>
						 <expression>
let $units := ('m2', 'mm2', 'cm2', 'dm2', 'km2')
let $featuresWithErrors := $features[self::*:DrainageBasin and *:area and not(*:area/@uom = $units)][position() le $limitErrors]
return
(if ($featuresWithErrors) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.featuresWithErrors', count($featuresWithErrors)),
 for $feature in $featuresWithErrors
   order by $feature/@gml:id
   let $uoms := fn:distinct-values($feature/*:area/@uom[not(. = $units)])
   return
     for $uom in $uoms return local:addMessage('TR.unknownUoM', map { 'filename': local:filename($feature), 'featureType': local-name($feature), 'gmlid': string($feature/@gml:id), 'property': 'area', 'uom': string($uom), 'allowedUoM' : string-join($units, ', ') }))
                   </expression>
						 <type ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
						 <translationTemplates>
							<translationTemplate ref="TR.unknownUoM"/>
							<translationTemplate ref="TR.featuresWithErrors"/>
						 </translationTemplates>
					  </TestAssertion>
					  <TestAssertion id="EID37f1501c-8596-417e-b895-22e01243974e">
						 <parent ref="EID177656c5-0871-4afb-b7f6-a50a774ce730"/>
						 <label>a.3: Falls.length</label>
						 <description><![CDATA[Verify that the property 'length' in Falls features has a length unit (meter or a derived unit). All references to a unit of measurement have to use one of the approved HTTP URIs (currently no approved HTTP URIs exist for units) or values from the UCUM dictionary.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 12 (2): Other Requirements and Rules. All measurement values shall be expressed using SI units or non-SI units accepted for use with the International System of Units, unless specified otherwise for a specific spatial data theme or type.</li></ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data/3.0rc3/reference-systems/spatial">Abstract Test Case 'Spatial reference systems'</a>]]></description>
						 <expectedResult/>
						 <expression>
let $units := ('m', 'mm', 'cm', 'dm', 'km')
let $featuresWithErrors := $features[self::*:Falls and *:length and not(*:length/@uom = $units)][position() le $limitErrors]
return
(if ($featuresWithErrors) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.featuresWithErrors', count($featuresWithErrors)),
 for $feature in $featuresWithErrors
   order by $feature/@gml:id
   let $uoms := fn:distinct-values($feature/*:length/@uom[not(. = $units)])
   return
     for $uom in $uoms return local:addMessage('TR.unknownUoM', map { 'filename': local:filename($feature), 'featureType': local-name($feature), 'gmlid': string($feature/@gml:id), 'property': 'length', 'uom': string($uom), 'allowedUoM' : string-join($units, ', ') }))
                   </expression>
						 <type ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
						 <translationTemplates>
							<translationTemplate ref="TR.unknownUoM"/>
							<translationTemplate ref="TR.featuresWithErrors"/>
						 </translationTemplates>
					  </TestAssertion>
					  <TestAssertion id="EIDbebd58d7-e306-4293-93c7-8110dce8497e">
						 <parent ref="EID177656c5-0871-4afb-b7f6-a50a774ce730"/>
						 <label>a.4: StandingWater.elevation</label>
						 <description><![CDATA[Verify that the property 'elevation' in StandingWater features has a length unit (meter or a derived unit). All references to a unit of measurement have to use one of the approved HTTP URIs (currently no approved HTTP URIs exist for units) or values from the UCUM dictionary.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 12 (2): Other Requirements and Rules. All measurement values shall be expressed using SI units or non-SI units accepted for use with the International System of Units, unless specified otherwise for a specific spatial data theme or type.</li></ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data/3.0rc3/reference-systems/spatial">Abstract Test Case 'Spatial reference systems'</a>]]></description>
						 <expectedResult/>
						 <expression>
let $units := ('m', 'mm', 'cm', 'dm', 'km')
let $featuresWithErrors := $features[self::*:StandingWater and *:elevation and not(*:elevation/@uom = $units)][position() le $limitErrors]
return
(if ($featuresWithErrors) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.featuresWithErrors', count($featuresWithErrors)),
 for $feature in $featuresWithErrors
   order by $feature/@gml:id
   let $uoms := fn:distinct-values($feature/*:elevation/@uom[not(. = $units)])
   return
     for $uom in $uoms return local:addMessage('TR.unknownUoM', map { 'filename': local:filename($feature), 'featureType': local-name($feature), 'gmlid': string($feature/@gml:id), 'property': 'elevation', 'uom': string($uom), 'allowedUoM' : string-join($units, ', ') }))
                   </expression>
						 <type ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
						 <translationTemplates>
							<translationTemplate ref="TR.unknownUoM"/>
							<translationTemplate ref="TR.featuresWithErrors"/>
						 </translationTemplates>
					  </TestAssertion>
					  <TestAssertion id="EIDf1e252f5-19db-4238-a039-76315a005a2a">
						 <parent ref="EID177656c5-0871-4afb-b7f6-a50a774ce730"/>
						 <label>a.5: StandingWater.meanDepth</label>
						 <description><![CDATA[Verify that the property 'meanDepth' in StandingWater features has a length unit (meter or a derived unit). All references to a unit of measurement have to use one of the approved HTTP URIs (currently no approved HTTP URIs exist for units) or values from the UCUM dictionary.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 12 (2): Other Requirements and Rules. All measurement values shall be expressed using SI units or non-SI units accepted for use with the International System of Units, unless specified otherwise for a specific spatial data theme or type.</li></ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data/3.0rc3/reference-systems/spatial">Abstract Test Case 'Spatial reference systems'</a>]]></description>
						 <expectedResult/>
						 <expression>
let $units := ('m', 'mm', 'cm', 'dm', 'km')
let $featuresWithErrors := $features[self::*:StandingWater and *:meanDepth and not(*:meanDepth/@uom = $units)][position() le $limitErrors]
return
(if ($featuresWithErrors) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.featuresWithErrors', count($featuresWithErrors)),
 for $feature in $featuresWithErrors
   order by $feature/@gml:id
   let $uoms := fn:distinct-values($feature/*:meanDepth/@uom[not(. = $units)])
   return
     for $uom in $uoms return local:addMessage('TR.unknownUoM', map { 'filename': local:filename($feature), 'featureType': local-name($feature), 'gmlid': string($feature/@gml:id), 'property': 'meanDepth', 'uom': string($uom), 'allowedUoM' : string-join($units, ', ') }))
                   </expression>
						 <type ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
						 <translationTemplates>
							<translationTemplate ref="TR.unknownUoM"/>
							<translationTemplate ref="TR.featuresWithErrors"/>
						 </translationTemplates>
					  </TestAssertion>
					  <TestAssertion id="EID908c7173-e4e5-45b5-bb1d-f14a9e11f5b7">
						 <parent ref="EID177656c5-0871-4afb-b7f6-a50a774ce730"/>
						 <label>a.6: StandingWater.surfaceArea</label>
						 <description><![CDATA[Verify that the property 'surfaceArea' in StandingWater features has an area unit (square meter or a derived unit). All references to a unit of measurement have to use one of the approved HTTP URIs (currently no approved HTTP URIs exist for units) or values from the UCUM dictionary.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 12 (2): Other Requirements and Rules. All measurement values shall be expressed using SI units or non-SI units accepted for use with the International System of Units, unless specified otherwise for a specific spatial data theme or type.</li></ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data/3.0rc3/reference-systems/spatial">Abstract Test Case 'Spatial reference systems'</a>]]></description>
						 <expectedResult/>
						 <expression>
let $units := ('m2', 'mm2', 'cm2', 'dm2', 'km2')
let $featuresWithErrors := $features[self::*:StandingWater and *:surfaceArea and not(*:surfaceArea/@uom = $units)][position() le $limitErrors]
return
(if ($featuresWithErrors) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.featuresWithErrors', count($featuresWithErrors)),
 for $feature in $featuresWithErrors
   order by $feature/@gml:id
   let $uoms := fn:distinct-values($feature/*:surfaceArea/@uom[not(. = $units)])
   return
     for $uom in $uoms return local:addMessage('TR.unknownUoM', map { 'filename': local:filename($feature), 'featureType': local-name($feature), 'gmlid': string($feature/@gml:id), 'property': 'surfaceArea', 'uom': string($uom), 'allowedUoM' : string-join($units, ', ') }))
                   </expression>
						 <type ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
						 <translationTemplates>
							<translationTemplate ref="TR.unknownUoM"/>
							<translationTemplate ref="TR.featuresWithErrors"/>
						 </translationTemplates>
					  </TestAssertion>
					  <TestAssertion id="EIDa4a86f46-012c-487f-a6be-7acb4b92e594">
						 <parent ref="EID177656c5-0871-4afb-b7f6-a50a774ce730"/>
						 <label>a.7: Watercourse.length</label>
						 <description><![CDATA[Verify that the property 'length' in Watercourse features has a length unit (meter or a derived unit). All references to a unit of measurement have to use one of the approved HTTP URIs (currently no approved HTTP URIs exist for units) or values from the UCUM dictionary.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 12 (2): Other Requirements and Rules. All measurement values shall be expressed using SI units or non-SI units accepted for use with the International System of Units, unless specified otherwise for a specific spatial data theme or type.</li></ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data/3.0rc3/reference-systems/spatial">Abstract Test Case 'Spatial reference systems'</a>]]></description>
						 <expectedResult/>
						 <expression>
let $units := ('m', 'mm', 'cm', 'dm', 'km')
let $featuresWithErrors := $features[self::*:Watercourse and *:length and not(*:length/@uom = $units)][position() le $limitErrors]
return
(if ($featuresWithErrors) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.featuresWithErrors', count($featuresWithErrors)),
 for $feature in $featuresWithErrors
   order by $feature/@gml:id
   let $uoms := fn:distinct-values($feature/*:length/@uom[not(. = $units)])
   return
     for $uom in $uoms return local:addMessage('TR.unknownUoM', map { 'filename': local:filename($feature), 'featureType': local-name($feature), 'gmlid': string($feature/@gml:id), 'property': 'length', 'uom': string($uom), 'allowedUoM' : string-join($units, ', ') }))
                   </expression>
						 <type ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
						 <translationTemplates>
							<translationTemplate ref="TR.unknownUoM"/>
							<translationTemplate ref="TR.featuresWithErrors"/>
						 </translationTemplates>
					  </TestAssertion>
					  <TestAssertion id="EID7c660e86-50a9-4e53-949b-35fb656f623d">
						 <parent ref="EID177656c5-0871-4afb-b7f6-a50a774ce730"/>
						 <label>a.8: Watercourse.width.lower</label>
						 <description><![CDATA[Verify that the property 'width.lower' in Watercourse features has a length unit (meter or a derived unit). All references to a unit of measurement have to use one of the approved HTTP URIs (currently no approved HTTP URIs exist for units) or values from the UCUM dictionary.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 12 (2): Other Requirements and Rules. All measurement values shall be expressed using SI units or non-SI units accepted for use with the International System of Units, unless specified otherwise for a specific spatial data theme or type.</li></ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data/3.0rc3/reference-systems/spatial">Abstract Test Case 'Spatial reference systems'</a>]]></description>
						 <expectedResult/>
						 <expression>
let $units := ('m', 'mm', 'cm', 'dm', 'km')
let $featuresWithErrors := $features[self::*:Watercourse and *:width/*/*:lower and not(*:width/*/*:lower/@uom = $units)][position() le $limitErrors]
return
(if ($featuresWithErrors) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.featuresWithErrors', count($featuresWithErrors)),
 for $feature in $featuresWithErrors
   order by $feature/@gml:id
   let $uoms := fn:distinct-values($feature/*:width/*/*:lower/@uom[not(. = $units)])
   return
     for $uom in $uoms return local:addMessage('TR.unknownUoM', map { 'filename': local:filename($feature), 'featureType': local-name($feature), 'gmlid': string($feature/@gml:id), 'property': 'width.lower', 'uom': string($uom), 'allowedUoM' : string-join($units, ', ') }))
                   </expression>
						 <type ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
						 <translationTemplates>
							<translationTemplate ref="TR.unknownUoM"/>
							<translationTemplate ref="TR.featuresWithErrors"/>
						 </translationTemplates>
					  </TestAssertion>
					  <TestAssertion id="EID327889a4-dcb0-42db-a082-10f86d9fd571">
						 <parent ref="EID177656c5-0871-4afb-b7f6-a50a774ce730"/>
						 <label>a.9: Watercourse.width.upper</label>
						 <description><![CDATA[Verify that the property 'width.upper' in Watercourse features has a length unit (meter or a derived unit). All references to a unit of measurement have to use one of the approved HTTP URIs (currently no approved HTTP URIs exist for units) or values from the UCUM dictionary.<br/><br/>
Relevant requirements:
<ul>
<li>IR Requirement Article 12 (2): Other Requirements and Rules. All measurement values shall be expressed using SI units or non-SI units accepted for use with the International System of Units, unless specified otherwise for a specific spatial data theme or type.</li></ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data/3.0rc3/reference-systems/spatial">Abstract Test Case 'Spatial reference systems'</a>]]></description>
						 <expectedResult/>
						 <expression>
let $units := ('m', 'mm', 'cm', 'dm', 'km')
let $featuresWithErrors := $features[self::*:Watercourse and *:width/*/*:upper and not(*:width/*/*:upper/@uom = $units)][position() le $limitErrors]
return
(if ($featuresWithErrors) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.featuresWithErrors', count($featuresWithErrors)),
 for $feature in $featuresWithErrors
   order by $feature/@gml:id
   let $uoms := fn:distinct-values($feature/*:width/*/*:upper/@uom[not(. = $units)])
   return
     for $uom in $uoms return local:addMessage('TR.unknownUoM', map { 'filename': local:filename($feature), 'featureType': local-name($feature), 'gmlid': string($feature/@gml:id), 'property': 'width.upper', 'uom': string($uom), 'allowedUoM' : string-join($units, ', ') }))
                   </expression>
						 <type ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
						 <translationTemplates>
							<translationTemplate ref="TR.unknownUoM"/>
							<translationTemplate ref="TR.featuresWithErrors"/>
						 </translationTemplates>
					  </TestAssertion>
					</testAssertions>
				 </TestStep>
			  </testSteps>
			</TestCase>
		 </testCases>
	  </TestModule>
	</testModules>
</ExecutableTestSuite>