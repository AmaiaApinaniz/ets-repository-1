<?xml version="1.0" encoding="utf-8"?>
<ExecutableTestSuite xmlns="http://www.interactive-instruments.de/etf/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="EIDec7323d5-d8f0-4cfe-b23a-b826df86d58c" xsi:schemaLocation="http://www.interactive-instruments.de/etf/2.0 ../../schema/model/resultSet.xsd">
	<itemHash>bQ==</itemHash>
	<remoteResource>http://github.com/inspire-eu-validation/ets-repository/metadata/iso</remoteResource>
	<localPath>/auto</localPath>
	<label>Conformance class: INSPIRE Profile based on EN ISO 19115 and EN ISO 19119</label>
	<description><![CDATA[This test suite examines metadata records against the requirements for metadata in INSPIRE.<br/><br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/metadata/1.3/iso-19115-19119" target="_blank">Conformance Class 'INSPIRE Profile based on EN ISO 19115 and EN ISO 19119'</a><br/><br/>
Pre-requisite conformance classes:
<ul><li><a href="http://inspire.ec.europa.eu/id/ats/metadata/1.3/xml-encoding" target="_blank">Conformance Class 'XML encoding of ISO 19115/19119 metadata'</a></li></ul>]]></description>
	<reference>../../inspire-md-bsxets.xq</reference>
	<version>0.1.0</version>
	<author>interactive instruments GmbH</author>
	<creationDate>2016-08-30T00:00:00Z</creationDate>
	<lastEditor>interactive instruments GmbH</lastEditor>
	<lastUpdateDate>2016-08-30T00:00:00Z</lastUpdateDate>
	<!--tags>
		TODO: not yet supported
		<tag ref="EID27dc9b72-0084-4f4a-981b-afc16e8d6e5e"/>
	</tags-->
	<testDriver ref="EID4dddc9e2-1b21-40b7-af70-6a2d156ad130"/>
	<translationTemplateBundle ref="EID70a263c0-0ad7-42f2-9d4d-0d8a4ca71b52"/>
	<ParameterList name="ETF Standard Parameters for metadata XML test objects">
		<parameter name="encoding" required="false">
			<defaultValue>CSW ISO AP 1.0.0</defaultValue>
			<description ref="TR.metadata-encoding"/>
			<allowedValues>^(CSW ISO AP 1\.0\.0|ISO/TS 19139)$</allowedValues>
			<type>string</type>
		</parameter>
		<parameter name="files_to_test" required="true">
			<defaultValue>.*</defaultValue>
			<description ref="TR.filesToTest"/>
			<allowedValues>.*</allowedValues>
			<type>string</type>
		</parameter>
		<parameter name="tests_to_execute" required="false">
			<defaultValue>.*</defaultValue>
			<description ref="TR.testsToExecute"/>
			<allowedValues>.*</allowedValues>
			<type>string</type>
		</parameter>
	</ParameterList>
	<supportedTestObjectTypes>
		<testObjectType ref="EID5a60dded-0cb0-4977-9b06-16c6c2321d2e"/>
	</supportedTestObjectTypes>
	<dependencies>
		<executableTestSuite ref="EIDe3500038-e37c-4dcf-806c-6bc82d585b3b"/>
	</dependencies>
	<testModules>
		<TestModule id="EID4c5d8006-3ac6-43d9-a1a3-1e19bf163ff3">
			<label>IGNORE</label>
			<description>IGNORE</description>
			<parent ref="EIDec7323d5-d8f0-4cfe-b23a-b826df86d58c"/>
			<testCases>
				<TestCase id="EID31c568d6-1073-4ff5-a5b2-f0e6b9683177">
					<label>Common tests</label>
				 <description>Execute tests that apply for all metadata records. Some of these tests are a pre-condition for other tests.</description>
					<parent ref="EID4c5d8006-3ac6-43d9-a1a3-1e19bf163ff3"/>
					<testSteps>
						<TestStep id="EID95a1a8a8-3132-453f-921a-c0334781e8bb">
							<label>IGNORE</label>
							<description>IGNORE</description>
							<parent ref="EID31c568d6-1073-4ff5-a5b2-f0e6b9683177"/>
							<statementForExecution>not applicable</statementForExecution>
							<testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
							<testAssertions>
								<TestAssertion id="EIDcacf6ca7-b5df-49e3-8577-dbc76cd6d72a">
									<label>md-iso.common: Hierarchy</label>
									<description><![CDATA[Checks that a resource type is provided and is taken from the list of valid values, i.e. 'dataset', 'series' or 'service'.<br/><br/>
This test is a pre-condition to process INSPIRE metadata records in the test object.<br/><br/>
Relevant requirements:
<ul>
<li>TG Requirement 1: The hierarchyLevel property is not mandated by ISO 19115 but is mandated for conformance to the INSPIRE Metadata Regulation 1205/2008/EC.</li>
<li>TG Requirement 2: The values of MD_ScopeCode in the scope of the INSPIRE Directive are: 'dataset' for spatial datasets; 'series' for spatial dataset series; 'service' for spatial data services.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/metadata/1.3/iso-19115-19119/hierarchy" target="_blank">Abstract Test Case 'Hierarchy'</a>]]></description>
									<parent ref="EID95a1a8a8-3132-453f-921a-c0334781e8bb"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $values := ('dataset', 'series', 'service')
let $recordsWithErrors := $records[not(gmd:hierarchyLevel/gmd:MD_ScopeCode/@codeListValue = $values)][position() le $limitErrors]
return
(if ($recordsWithErrors) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.recordsWithErrors', count($recordsWithErrors)),
 for $record in $recordsWithErrors
   let $rid := $record/gmd:fileIdentifier/gco:CharacterString/text()
   order by $rid
   let $levels := $record/gmd:hierarchyLevel/gmd:MD_ScopeCode/@codeListValue
   return
     local:addMessage('TR.hierarchyLevel', map { 'filename': local:filename($record), 'id': $rid, 'hierarchyLevels': fn:string-join($levels,', ') }))
									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.recordsWithErrors"/>
										<translationTemplate ref="TR.hierarchyLevel"/>
									</translationTemplates>
								</TestAssertion>
							 <TestAssertion id="EIDe2459219-e13e-43ac-9cea-99d98225dd31">
							  <label>md-iso.common: Keywords</label>
							  <description><![CDATA[Checks if at least one keyword element is provided and it is not an empty CharacterString.<br/><br/>
This test is a pre-condition to process INSPIRE metadata records in the test object.<br/><br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/metadata/1.3/iso-19115-19119/keyword" target="_blank">Abstract Test Case 'Keyword'</a>]]></description>
							  <parent ref="EID95a1a8a8-3132-453f-921a-c0334781e8bb"/>
							  <expectedResult>NOT_APPLICABLE</expectedResult>
							  <expression>
							   let $messages := (for $record in $records
							   let $rid := $record/gmd:fileIdentifier/*/text()
							   let $keywords := $record/gmd:identificationInfo[1]/*/gmd:descriptiveKeywords/*/gmd:keyword/*
							   return
							   if (not($keywords)) then
							   local:addMessage('TR.noKeywords', map { 'filename': local:filename($record), 'id': $rid })
							   else if ($keywords[string-length(normalize-space(text())) > 0]) then
							   ()
							   else local:addMessage('TR.emptyKeywords', map { 'filename': local:filename($record), 'id': $rid }))[position() le $limitErrors]
							   return
							   (if ($messages) then 'FAILED' else 'PASSED',
							   local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
							   $messages)
							  </expression>
							  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
							  <translationTemplates>
							   <translationTemplate ref="TR.recordsWithErrors"/>
							   <translationTemplate ref="TR.noKeywords"/>
							   <translationTemplate ref="TR.emptyKeywords"/>
							  </translationTemplates>
							 </TestAssertion>
							 <TestAssertion id="EID163c7a80-2288-462f-a1c9-0973b5f96d40">
							  <label>md-iso.common: Temporal</label>
							  <description><![CDATA[<p>This test performs the following checks:</p>
<ul>
<li>Check if a TimePeriod element exists and if it contains gml:begin or gml:end elements, then the element value (a gml:TimeInstant) is provided inline.</li>
<li>Check that at least one temporal reference with dateType = 'publication', 'creation', or 'revision' exists.</li>
</ul>
The test fails if either of these conditions is not fulfilled.<br/><br/>
Relevant requirement(s):</p>
<ul>
<li>TG MD Requirement 22: The INSPIRE Metadata Regulation 1205/2008/EC requires at least one temporal reference chosen from one of these four categories: 
<ul>
<li>temporal extent</li>
<li>date of publication</li>
<li>date of last revision</li>
<li>date of creation</li>
</ul>
</li>
<li>TG MD Requirement 23: To be compliant with ISO 19115 it is necessary to use at least one among date of publication, date of last revision, or the date of creation.</li>
</ul>
<p>Source: <a href="http://inspire.ec.europa.eu/id/ats/metadata/1.3/iso-19115-19119/ds-temporal" target="_blank">Abstract Test Case 'Temporal'</a></p>]]></description>
							  <parent ref="EID95a1a8a8-3132-453f-921a-c0334781e8bb"/>
							  <expectedResult>NOT_APPLICABLE</expectedResult>
							  <expression>
							   let $messages := 
							   (for $record in $records
							   let $rid := $record/gmd:fileIdentifier/*/text()
							   (: NOTE: the 'extent' property is not part of the gmd:AbstractMD_Identification_Type and therefore defined in two different namespaces (gmd and srv) :)
							   let $timePeriods := $record/gmd:identificationInfo[1]/*/*[local-name(.) = 'extent' and namespace-uri(.) = ('http://www.isotc211.org/2005/gmd','http://www.isotc211.org/2005/srv')]/*/gmd:temporalElement/*/gmd:extent/gml:TimePeriod
							   let $invalidTimePeriods := 
							   for $timePeriod in $timePeriods
							   return
							   if (not($timePeriod[(not(gml:begin) or gml:begin/gml:TimeInstant) and (not(gml:end) or gml:end/gml:TimeInstant)])) then
							   $timePeriod
							   else
							   ()
							   let $temporalReferences := $record/gmd:identificationInfo[1]/*/gmd:citation/*/gmd:date/*
							   let $relevantTempRefs := $temporalReferences[gmd:dateType/*/@codeListValue = ('publication','revision','creation')]
							   return
							   if($invalidTimePeriods) then
							   local:addMessage('TR.timePeriodWithoutInlineTimeInstant', map { 'filename': local:filename($record), 'id': $rid })
							   else if(not($relevantTempRefs)) then
							   local:addMessage('TR.noRelevantDate', map { 'filename': local:filename($record), 'id': $rid })
							   else
							   ()
							   )[position() le $limitErrors]
							   return
							   (if ($messages) then 'FAILED' else 'PASSED',
							   local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
							   $messages)
							  </expression>
							  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
							  <translationTemplates>							   
							   <translationTemplate ref="TR.timePeriodWithoutInlineTimeInstant"/>
							   <translationTemplate ref="TR.noRelevantDate"/>
							   <translationTemplate ref="TR.recordsWithErrors"/>
							  </translationTemplates>
							 </TestAssertion>
							 <TestAssertion id="EIDb0de8830-67ee-4bc5-b122-136060ea6103">
							  <label>md-iso.common: Abstract</label>
							  <description><![CDATA[Checks if an abstract is present and not an empty characterstring.<br/><br/>
			       The abstract is a brief narrative summary of the content of the resource and provides a clear and concise statement that enables the reader to understand the content of the data or service.<br/><br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/metadata/1.3/iso-19115-19119/abstract" target="_blank">Abstract Test Case 'Abstract'</a>]]></description>
							  <parent ref="EID95a1a8a8-3132-453f-921a-c0334781e8bb"/>
							  <expectedResult>NOT_APPLICABLE</expectedResult>
							  <expression>
							   let $messages := (for $record in $records
							   let $rid := $record/gmd:fileIdentifier/*/text()
							   let $abstract := $record/gmd:identificationInfo[1]/*/gmd:abstract/*
							   return
							   if (not($abstract)) then
							   local:addMessage('TR.noAbstract', map { 'filename': local:filename($record), 'id': $rid })
							   else 
							   if (string-length(normalize-space($abstract/text())) = 0) then
							   local:addMessage('TR.emptyAbstract', map { 'filename': local:filename($record), 'id': $rid })
							   else ())[position() le $limitErrors]
							   return
							   (if ($messages) then 'FAILED' else 'PASSED',
							   local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
							   $messages)
							  </expression>
							  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
							  <translationTemplates>
							   <translationTemplate ref="TR.recordsWithErrors"/>
							   <translationTemplate ref="TR.noAbstract"/>
							   <translationTemplate ref="TR.emptyAbstract"/>
							  </translationTemplates>
							 </TestAssertion>
							 <TestAssertion id="EIDdcb6ea6f-08ee-45cf-a947-ae411ec5bc81">
							  <label>md-iso.common: Title</label>
							  <description><![CDATA[Checks if a title is present and not an empty characterstring.<br/><br/>
			       The title is a characteristic, and often unique, name by which the resource is known. The title is the most informative element of a metadata record and usually the highest priority as search engines go to this element.<br/><br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/metadata/1.3/iso-19115-19119/title" target="_blank">Abstract Test Case 'Title'</a>]]></description>
							  <parent ref="EID95a1a8a8-3132-453f-921a-c0334781e8bb"/>
							  <expectedResult>NOT_APPLICABLE</expectedResult>
							  <expression>
							   let $messages := (for $record in $records
							   let $rid := $record/gmd:fileIdentifier/*/text()
							   let $title := $record/gmd:identificationInfo[1]/*/gmd:citation/*/gmd:title/*
							   return
							   if (not($title)) then
							   local:addMessage('TR.noTitle', map { 'filename': local:filename($record), 'id': $rid })
							   else 
							   if (string-length(normalize-space($title/text())) = 0) then
							   local:addMessage('TR.emptyTitle', map { 'filename': local:filename($record), 'id': $rid })
							   else ())[position() le $limitErrors]
							   return
							   (if ($messages) then 'FAILED' else 'PASSED',
							   local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
							   $messages)
							  </expression>
							  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
							  <translationTemplates>
							   <translationTemplate ref="TR.noTitle"/>
							   <translationTemplate ref="TR.emptyTitle"/>
							   <translationTemplate ref="TR.recordsWithErrors"/>
							  </translationTemplates>
							 </TestAssertion>
							 <TestAssertion id="EID99f6e123-0d0d-475f-8bba-cdcb5cc402e0">
							  <label>md-iso.common: Vocabulary</label>
							  <description><![CDATA[A keyword value reference can contain a controlled vocabulary from where it originates. This element is optional but, if given, must follow certain guidelines.<br/><br/>
			       The test performs the following check for each vocabulary:
<ul>
<li>the node must contain a title and should not be an empty characterstring</li>
<li>the node must contain a date</li>
<li>the node must contain a dateType which contains text that equals one of 'publication', 'revision' or 'creation'.</li>
</ul>
Relevant requirement(s):
<ul>
<li>TG MD Requirement 17: If  the  keyword  value  originates  from  a  controlled  vocabulary (thesaurus, ontology), for example GEMET - Concepts, the citation of the originating controlled vocabulary shall be provided.</li>
<li>TG MD Requirement 18: The thesaurusName identification shall include at least the title and a reference date (date of publication, date of last revision or of creation) of the originating controlled vocabulary.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/metadata/1.3/iso-19115-19119/vocabulary" target="_blank">Abstract Test Case 'Vocabulary'</a>]]></description>
							  <parent ref="EID95a1a8a8-3132-453f-921a-c0334781e8bb"/>
							  <expectedResult>NOT_APPLICABLE</expectedResult>
							  <expression>
							   let $messages := (for $record in $records
							   let $rid := $record/gmd:fileIdentifier/*/text()
							   let $thesauri := $record/gmd:identificationInfo[1]/*/gmd:descriptiveKeywords/*/gmd:thesaurusName
							   return
							   if (not($thesauri)) then
							   ()
							   else 
							   for $thesaurus in $thesauri
							   let $title := $thesaurus/*/gmd:title/*/text()
							   let $hasExpectedDate := boolean($thesaurus/*/gmd:date/*[gmd:date/*/text() and gmd:dateType/*/@codeListValue = ('publication','revision','creation')])
							   return
							   if (not($title)) then
							   local:addMessage('TR.noTitleForThesaurus', map { 'filename': local:filename($record), 'id': $rid })
							   else if (not($hasExpectedDate)) then
							   local:addMessage('TR.invalidDateForThesaurus', map { 'filename': local:filename($record), 'id': $rid })
							   else ())[position() le $limitErrors]
							   return
							   (if ($messages) then 'FAILED' else 'PASSED',
							   local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
							   $messages)
							  </expression>
							  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
							  <translationTemplates>
							   <translationTemplate ref="TR.noTitleForThesaurus"/>
							   <translationTemplate ref="TR.invalidDateForThesaurus"/>
							   <translationTemplate ref="TR.recordsWithErrors"/>
							  </translationTemplates>
							 </TestAssertion>
							 <TestAssertion id="EIDc297017d-05a6-4026-97de-f581bb12a9ad">
							  <label>md-iso.common: Access use</label>
							  <description><![CDATA[Conditions applying to access and use must be described at least once for the metadata resource.<br/><br/>
The test checks if a useLimitation element is provided and it is not an empty characterstring.<br/><br/>
Relevant requirement(s):
<ul>
<li>TG MD Requirement 33: If no conditions apply to the access and use of the resource, ‘no conditions apply’ shall be used. If conditions are unknown, ‘conditions unknown’ shall be used.</li>
<li>TG MD Requirement 34: Descriptions of terms and conditions, including where applicable, the corresponding fees shall be provided through this element or a link (URL) where these terms and conditions are described.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/metadata/1.3/iso-19115-19119/ds-access-use" target="_blank">Abstract Test Case 'Dataset access use'</a>]]></description>
							  <parent ref="EID95a1a8a8-3132-453f-921a-c0334781e8bb"/>
							  <expectedResult>NOT_APPLICABLE</expectedResult>
							  <expression>
							   let $messages := (for $record in $records
							   let $rid := $record/gmd:fileIdentifier/*/text()
							   let $useLimitations := $record/gmd:identificationInfo[1]/*/gmd:resourceConstraints/*/gmd:useLimitation/*
							   return
							   if (not($useLimitations)) then
							   local:addMessage('TR.noUseLimitation', map { 'filename': local:filename($record), 'id': $rid })
							   else     
							   if (some $useLim in $useLimitations satisfies string-length(normalize-space($useLim/text())) > 0) then
							   ()
							   else
							   local:addMessage('TR.emptyUseLimitation', map { 'filename': local:filename($record), 'id': $rid })
							   )[position() le $limitErrors]
							   return
							   (if ($messages) then 'FAILED' else 'PASSED',
							   local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
							   $messages)
							  </expression>
							  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
							  <translationTemplates>							   
							   <translationTemplate ref="TR.noUseLimitation"/>
							   <translationTemplate ref="TR.emptyUseLimitation"/>
							   <translationTemplate ref="TR.recordsWithErrors"/>
							  </translationTemplates>
							 </TestAssertion>
							 <TestAssertion id="EID50762969-d83c-4360-ae9c-f28300df4f77">
							  <label>md-iso.common: Public access</label>
							  <description><![CDATA[<p>This test checks if at least one of the elements available inside gmd:resourceConstraints passes at least one of the following checks:</p>
<ul>
<li>Check whether it contains an element accessConstraints of type gmd:MD_RestrictionCode[@codeListValue=x], where x is of type MD_RestrictionCode as defined in <a href="http://standards.iso.org/ittf/PubliclyAvailableStandards/ISO_19139_Schemas/resources/codelist/gmxCodelists.xml#MD_RestrictionCode" target="_blank">ISO 19115, chapter B.5.24</a>. If x is &ldquo;otherRestrictions&rdquo; check also whether the element inside gmd:resourceConstraints contains an element otherConstraints of type CharacterString and which is not an empty characterstring.</li>
<li>Check whether it contains an element classification of type gmd:MD_ClassificationCode[@codeListValue=x], where x is of type MD_ClassificationCode as defined in <a href="http://standards.iso.org/ittf/PubliclyAvailableStandards/ISO_19139_Schemas/resources/codelist/gmxCodelists.xml#MD_ClassificationCode" target="_blank">ISO 19115, chapter B.5.11</a>.</li>
</ul>
<p>If none of the elements inside gmd:resourceConstraints passes at least one of the checks, the test fails.<br /><br /> Relevant requirement(s):</p>
<ul>
<li>TG MD Requirement 30: There shall be at least one ISO 19115 metadata element representing a limitation on public access (see 2.9.1) and one ISO 19115 metadata element representing a condition applying to access and use (see 2.9.2) as part of the different instances of MD_Constraints and its subclasses.</li>
<li>TG MD Requirement 31: There shall be at least one instance of MD_Constraints or one of its subclasses (See SC12 in Section 1.2) even if there is no limitation on public access or no specific condition applies to access and use of the resource.</li>
<li>TG MD Requirement 32: Limitations on public access shall be represented by at least one of these metadata elements:
<ul>
<li>MD_LegalConstraints. accessConstraints</li>
<li>MD_LegalConstraints. otherConstraints</li>
<li>MD_SecurityConstraints. classification</li>
</ul>
</li>
</ul>
<p>Source: <a href="http://inspire.ec.europa.eu/id/ats/metadata/1.3/iso-19115-19119/ds-public-access" target="_blank">Abstract Test Case 'Dataset public access'</a></p>]]></description>
							  <parent ref="EID95a1a8a8-3132-453f-921a-c0334781e8bb"/>
							  <expectedResult>NOT_APPLICABLE</expectedResult>
							  <expression>
							   let $iso19115_MD_ClassificationCode := ('unclassified','restricted','confidential','secret','topSecret')
							   let $iso19115_MD_RestrictionCode_without_otherRestrictions := ('copyright','patent','patentPending','trademark','license','intellectualPropertyRights','restricted')
							   let $messages := 
							   (for $record in $records
							   let $rid := $record/gmd:fileIdentifier/*/text()
							   let $resourceConstraints := $record/gmd:identificationInfo/*/gmd:resourceConstraints/*
							   let $validConstraints := 
							   for $resCon in $resourceConstraints
							   let $oneValidAccessConstraint := 
							   if ($resCon[gmd:accessConstraints/gmd:MD_RestrictionCode/@codeListValue ='otherRestrictions' and string-length(normalize-space(gmd:otherConstraints/*/text())) > 0]) then
							   true()
							   else if($resCon/gmd:accessConstraints/gmd:MD_RestrictionCode[@codeListValue = $iso19115_MD_RestrictionCode_without_otherRestrictions]) then
							   true()
							   else 
							   false()
							   let $oneValidClassification := boolean($resCon/gmd:classification/gmd:MD_ClassificationCode[@codeListValue = $iso19115_MD_ClassificationCode])
							   return 
							   if($oneValidAccessConstraint or $oneValidClassification) then
							   $resCon
							   else
							   ()
							   return
							   if ($validConstraints) then
							   ()
							   else
							   local:addMessage('TR.noValidResourceConstraint', map { 'filename': local:filename($record), 'id': $rid })
							   )[position() le $limitErrors]
							   return
							   (if ($messages) then 'FAILED' else 'PASSED',
							   local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
							   $messages)
							  </expression>
							  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
							  <translationTemplates>							   
							   <translationTemplate ref="TR.noValidResourceConstraint"/>
							   <translationTemplate ref="TR.recordsWithErrors"/>
							  </translationTemplates>
							 </TestAssertion>
							 <TestAssertion id="EID0606b9bf-8f5a-4e71-a922-3cf6ab8c1de0">
							  <label>md-iso.common: Specification</label>
							  <description><![CDATA[<p>The test first checks if there is at least one specification. In case there is one, it performs the following checks:</p>
<ul>
<li>The specification must contain an element of type gmd:CI_Citation/gmd:title which should not be an empty characterstring.</li>
<li>The specification must contain an element of type gmd:CI_Citation/gmd:date[./*/gmd:dateType/*/text()='{type}']/*/gmd:date, where {type} is one of 'creation', 'revision' and 'publication'.</li>
<li>The specification has gmd:DQ_DomainConsistency as a parent element.</li>
</ul>
Relevant requirement(s):</p>
<ul>
<li>TG MD Requirement 29: The INSPIRE Metadata Regulation 1205/2008/EC defines in Part D 5 When the conformity to any specification has been evaluated, it shall be reported as a domain consistency element (i.e. an instance of DQ_DomainConsistency) in ISO 19115 metadata.</li>
</ul>
<p>Source: <a href="http://inspire.ec.europa.eu/id/ats/metadata/1.3/iso-19115-19119/ds-specification" target="_blank">Abstract Test Case 'Dataset specification'</a></p>]]></description>
							  <parent ref="EID95a1a8a8-3132-453f-921a-c0334781e8bb"/>
							  <expectedResult>NOT_APPLICABLE</expectedResult>
							  <expression>
							   let $messages := (for $record in $records
							   let $rid := $record/gmd:fileIdentifier/*/text()
							   let $specifications := $record/gmd:dataQualityInfo/*/gmd:report/*/gmd:result/*/gmd:specification
							   return 
							   if(not($specifications)) then
							   () (: Only failure situations are reported, no warnings :)
							   else
							   for $spec in $specifications
							   return
							   if (not($spec/gmd:CI_Citation/gmd:title/*[string-length(normalize-space(text())) > 0])) then
							   local:addMessage('TR.noTitleForSpecification', map { 'filename': local:filename($record), 'id': $rid })
							   else if (not($spec/gmd:CI_Citation/gmd:date/*/gmd:dateType/*[@codeListValue = ('publication','creation','revision')])) then
							   local:addMessage('TR.noDateTypeForSpecification', map { 'filename': local:filename($record), 'id': $rid })
							   else if (not($spec/../../..[local-name(.) = 'DQ_DomainConsistency' and namespace-uri(.) = 'http://www.isotc211.org/2005/gmd'])) then
							   local:addMessage('TR.noDQDomainConsistencyParent', map { 'filename': local:filename($record), 'id': $rid })
							   else
							   ()
							   )[position() le $limitErrors]
							   return
							   (if ($messages) then 'FAILED' else 'PASSED',
							   local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
							   $messages)
							  </expression>
							  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
							  <translationTemplates>							   
							   <translationTemplate ref="TR.noTitleForSpecification"/>
							   <translationTemplate ref="TR.noDateTypeForSpecification"/>
							   <translationTemplate ref="TR.noDQDomainConsistencyParent"/>
							   <translationTemplate ref="TR.recordsWithErrors"/>
							  </translationTemplates>
							 </TestAssertion>
							</testAssertions>
						</TestStep>
					</testSteps>
				</TestCase>
			 <TestCase id="EID455b0d39-ee9f-4f5a-a15e-2b264e57bb62">
			  <label>Common tests - level 2</label>
			  <description>Execute tests that apply for all metadata records and depend on other common tests.</description>
			  <parent ref="EID4c5d8006-3ac6-43d9-a1a3-1e19bf163ff3"/>
			  <dependencies>
			   <testCase ref="EID31c568d6-1073-4ff5-a5b2-f0e6b9683177"/>
			  </dependencies>
			  <testSteps>
			   <TestStep id="EID96ea0d7d-3115-4dd2-af86-82c788085239">
			    <label>IGNORE</label>
			    <description>IGNORE</description>
			    <parent ref="EID455b0d39-ee9f-4f5a-a15e-2b264e57bb62"/>
			    <statementForExecution>not applicable</statementForExecution>
			    <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
			    <testAssertions>
			     <TestAssertion id="EID981aa1f9-4c82-48eb-9761-dbe45e6a19f6">
			      <label>md-iso.common.lvl2: Temporal date</label>
			      <description><![CDATA[<p>The test checks that dates are expressed in accordance with ISO 8601:</p>
<ul>
<li>Begin and end of a TimePeriod must be valid dates (xs:date or xs:dateTime).</li>
<li>An @frame attribute is not allowed on a beginPosition or endPosition of a gml:TimePeriod.</li>
<li>A date of 'publication', 'creation', or 'revision' must be valid (xs:date or xs:dateTime).</li>
</ul>
Relevant requirement(s):</p>
<ul>
<li>TG MD Requirement 24: The default reference system shall be the Gregorian calendar, with dates expressed in accordance with ISO 8601 (yyyy-mm-dd where yyyy is the year, mm is the month and dd is the day).</li>
</ul>
<p>Source: <a href="http://inspire.ec.europa.eu/id/ats/metadata/1.3/iso-19115-19119/ds-temporal-date" target="_blank">Abstract Test Case 'Dataset temporal date'</a></p>]]></description>
			      <parent ref="EID96ea0d7d-3115-4dd2-af86-82c788085239"/>
			      <expectedResult>NOT_APPLICABLE</expectedResult>
			      <expression>
			       let $messages := 
			       (for $record in $records
			       let $rid := $record/gmd:fileIdentifier/*/text()
			       (: NOTE: the 'extent' property is not part of the gmd:AbstractMD_Identification_Type and therefore defined in two different namespaces (gmd and srv) :)
			       let $timePeriods := $record/gmd:identificationInfo[1]/*/*[local-name(.) = 'extent' and namespace-uri(.) = ('http://www.isotc211.org/2005/gmd','http://www.isotc211.org/2005/srv')]/*/gmd:temporalElement/*/gmd:extent/gml:TimePeriod   
			       let $invalidTimePeriods := 
			       for $timePeriod in $timePeriods
			       let $beginDate := ($timePeriod/gml:begin/gml:TimeInstant/gml:timePosition/text(), $timePeriod/gml:beginPosition/text())
			       let $endDate := ($timePeriod/gml:end/gml:TimeInstant/gml:timePosition/text(), $timePeriod/gml:endPosition/text())
			       (: NOTE: we exclude the case in which a gml:begin or gml:end references the gml:TimeInstant; this situation is checked by another test that this test depends upon :)
			       let $validDate := (not($beginDate) or local:is-valid-date-or-dateTime($beginDate)) and (not($endDate) or local:is-valid-date-or-dateTime($endDate))
			       return
			       if($validDate) then
			       ()
			       else 
			       $timePeriod
			       let $frameOnBeginPosition := boolean($timePeriods/gml:beginPosition/@frame)
			       let $frameOnEndPosition := boolean($timePeriods/gml:endPosition/@frame)
			       let $relevantDates := $record/gmd:identificationInfo[1]/*/gmd:citation/*/gmd:date/*[gmd:dateType/*/@codeListValue = ('publication','revision','creation')]/gmd:date/*
			       let $invalidRelevantDates := 
			       for $relevantDate in $relevantDates
			       let $validDate := local:is-valid-date-or-dateTime($relevantDate)
			       return
			       if($validDate) then
			       ()
			       else 
			       $relevantDate
			       return
			       if ($invalidTimePeriods) then
			       local:addMessage('TR.timePeriodWithInvalidDate', map { 'filename': local:filename($record), 'id': $rid })
			       else if($frameOnBeginPosition) then 
			       local:addMessage('TR.timePeriodWithFrameOnBeginPosition', map { 'filename': local:filename($record), 'id': $rid })
			       else if($frameOnEndPosition) then 
			       local:addMessage('TR.timePeriodWithFrameOnEndPosition', map { 'filename': local:filename($record), 'id': $rid })
			       else if($invalidRelevantDates) then
			       local:addMessage('TR.invalidRelevantDate', map { 'filename': local:filename($record), 'id': $rid })
			       else
			       ()   
			       )[position() le $limitErrors]
			       return
			       (if ($messages) then 'FAILED' else 'PASSED',
			       local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
			       $messages)
			      </expression>
			      <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
			      <translationTemplates>							   
			       <translationTemplate ref="TR.timePeriodWithInvalidDate"/>
			       <translationTemplate ref="TR.timePeriodWithFrameOnBeginPosition"/>
			       <translationTemplate ref="TR.timePeriodWithFrameOnEndPosition"/>
			       <translationTemplate ref="TR.invalidRelevantDate"/>
			       <translationTemplate ref="TR.recordsWithErrors"/>
			      </translationTemplates>
			     </TestAssertion>
			    </testAssertions>
			   </TestStep>
			  </testSteps>
			 </TestCase>
				<TestCase id="EIDb5b5b5c0-c021-4b90-9c76-9603bf17ed4c">
					<label>Dataset (series) tests</label>
					<description>Execute tests that apply for all dataset / dataset series metadata records.</description>
					<parent ref="EID4c5d8006-3ac6-43d9-a1a3-1e19bf163ff3"/>
					<dependencies>
						<testCase ref="EID31c568d6-1073-4ff5-a5b2-f0e6b9683177"/>
					</dependencies>
					<testSteps>
						<TestStep id="EID0422a7f2-4ec7-4a75-9667-38f265ea4545">
							<label>IGNORE</label>
							<description>IGNORE</description>
							<parent ref="EIDb5b5b5c0-c021-4b90-9c76-9603bf17ed4c"/>
							<statementForExecution>not applicable</statementForExecution>
							<testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
							<testAssertions>
							 <TestAssertion id="EID4148f8be-19d3-4def-b7da-2f451f5c8e1f">
							  <label>md-iso.ds: Dataset (and service) conformity</label>
							  <description><![CDATA[The metadata shall include information on the degree of conformity with the implementing rules on interoperability of spatial data sets and services.<br/><br/>
The test checks that at least one conformity statement with a conformance result is given. A conformance result must either have a boolean value or state (via a nilReason attribute) that the conformance is 'unknown'.<br/><br/>
Relevant requirements:
<ul>
<li>TG MD Requirement 28: In conformance to INSPIRE Directive 2007/2/EC, the metadata shall include information on the degree of conformity with the implementing rules on interoperability of spatial data sets and services.</li>
<li>TG MD Requirement 29: The INSPIRE Metadata Regulation 1205/2008/EC defines in Part D 5 When the conformity to any specification has been evaluated, it shall be reported as a domain consistency element (i.e. an instance of DQ_DomainConsistency) in ISO 19115 metadata.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/metadata/1.3/iso-19115-19119/ds-conformity" target="_blank">Abstract Test Case 'Dataset conformity'</a>]]></description>
							  <parent ref="EID0422a7f2-4ec7-4a75-9667-38f265ea4545"/>
							  <expectedResult>NOT_APPLICABLE</expectedResult>
							  <expression>
							   let $levels := ('dataset', 'service')
							   let $recordsToInspect := $records[gmd:hierarchyLevel/*/@codeListValue = $levels]
							   let $messages := (for $record in $recordsToInspect
							   let $rid := $record/gmd:fileIdentifier/*/text()
							   let $confResPasses := $record/gmd:dataQualityInfo/*/gmd:report/gmd:DQ_DomainConsistency/gmd:result/gmd:DQ_ConformanceResult/gmd:pass
							   return 
							   if(not($confResPasses)) then
							   local:addMessage('TR.noConformityStatement', map { 'filename': local:filename($record), 'id': $rid })
							   else
							   for $confResPass in $confResPasses
							   return
							   if (not($confResPass/*) and not($confResPass/@gco:nilReason = 'unknown')) then
							   local:addMessage('TR.declareNoConformityEvaluationAsUnknown', map { 'filename': local:filename($record), 'id': $rid })
							   else () (: Schema validation will ensure that the content of $confResPass is a gco:Boolean with boolean value :)
							   )[position() le $limitErrors]
							   return
							   (if ($messages) then 'FAILED' else 'PASSED',
							   local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
							   $messages)
							  </expression>
							  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
							  <translationTemplates>
							   <translationTemplate ref="TR.noConformityStatement"/>
							   <translationTemplate ref="TR.declareNoConformityEvaluationAsUnknown"/>
							   <translationTemplate ref="TR.recordsWithErrors"/>
							  </translationTemplates>
							 </TestAssertion>
							 <TestAssertion id="EIDdf3b3ecb-d429-450a-abd8-895b6c1d8e79">
							  <label>md-iso.ds: Dataset identification</label>
							  <description><![CDATA[Unique resource identifier. If the type of the resource was dataset or series, a unique identifier identifying the resource must be given.<br/><br/>
This test case only applies to records with a hierarchyLevel value 'dataset' or 'series'.<br/><br/>
The test first checks if a unique identifier is given and if it is of type MD_Identifier or RS_Identifier. The contained code element may not be empty.<br/><br/>
Relevant requirements:
<ul>
<li>TG Requirement 5: The code property is required (see B.2.7.3 of ISO 19115).</li>
<li>TG Requirement 6: If a value for codeSpace is provided, then the data type for the identifier shall be RS_Identifier, which is substitutable for the usual MD_Identifier.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/metadata/1.3/iso-19115-19119/ds-identification" target="_blank">Abstract Test Case 'Dataset identification'</a>]]></description>
							  <parent ref="EID0422a7f2-4ec7-4a75-9667-38f265ea4545"/>
							  <expectedResult>NOT_APPLICABLE</expectedResult>
							  <expression>
							   let $levels := ('dataset', 'series')
							   let $recordsToInspect := $records[gmd:hierarchyLevel/gmd:MD_ScopeCode/@codeListValue = $levels]
							   let $messages := (for $record in $recordsToInspect
							   let $rid := $record/gmd:fileIdentifier/gco:CharacterString/text()
							   let $identifiers := $record/gmd:identificationInfo[1]//gmd:citation//gmd:identifier/*/gmd:code/gco:CharacterString/text()
							   return
							   if (not($identifiers)) then
							   local:addMessage('TR.noIdentifier', map { 'filename': local:filename($record), 'id': $rid })
							   else
							   for $identifier in $identifiers
							   return
							   if (string-length(normalize-space($identifier)) = 0) then
							   local:addMessage('TR.emptyIdentifier', map { 'filename': local:filename($record), 'id': $rid })
							   else if (count($records[gmd:identificationInfo[1]//gmd:citation//gmd:identifier/*/gmd:code/gco:CharacterString/text()=$identifier])>1) then
							   local:addMessage('TR.duplicateIdentifier', map { 'filename': local:filename($record), 'id': $rid, 'identifier': $identifier })
							   else ())[position() le $limitErrors]
							   return
							   (if ($messages) then 'FAILED' else 'PASSED',
							   local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
							   $messages)
							  </expression>
							  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
							  <translationTemplates>
							   <translationTemplate ref="TR.noIdentifier"/>
							   <translationTemplate ref="TR.emptyIdentifier"/>
							   <translationTemplate ref="TR.duplicateIdentifier"/>
							   <translationTemplate ref="TR.recordsWithErrors"/>							   
							  </translationTemplates>
							 </TestAssertion>
							 <TestAssertion id="EIDdeecb600-6b6e-4fa3-a6df-4913055b3dd1">
							  <label>md-iso.ds: Dataset keyword</label>
							  <description><![CDATA[The test checks for each descriptiveKeywords block if it references either http://www.eionet.europa.eu/gemet/inspire_themes or any duplicate of that thesaurus, e.g. http://inspire.ec.europa.eu/theme. If a block is referencing that thesaurus the test checks if at least one keyword is available and it matches with a concept in the thesaurus. <br/><br/>
This test case only applies to records with a hierarchyLevel value 'dataset' or 'series'.<br/><br/>
The test first checks if a descriptiveKeywords block exists with vocabulary title (identified via gmd:thesaurusName/*/gmd:title/*/text()) equal to 'GEMET - INSPIRE themes, version 1.0'. If such a keyword block exists, then at least one keyword must be equal to one of the codes from the http://inspire.ec.europa.eu/theme codelist - either a language neutral code or one of the language specific code titles provided by the INSPIRE registry.<br/><br/>
Relevant requirements:
<ul>
<li>TG MD Requirement 14: If only one keyword is used, then for spatial dataset or spatial dataset series, the keyword:
<ul>
<li>shall describe the relevant INSPIRE Spatial Data Theme (as defined in Annex I, II and III of the INSPIRE Directive)</li>
<li>shall be expressed in the language of the metadata for the 34 INSPIRE Spatial Data Themes (please use the terms in each of the official languages in which the INSPIRE Directive has been translated) or a neutral language values such as a URI.</li>
</ul>
</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/metadata/1.3/iso-19115-19119/ds-keywords" target="_blank">Abstract Test Case 'Dataset keywords'</a>]]></description>
							  <parent ref="EID0422a7f2-4ec7-4a75-9667-38f265ea4545"/>
							  <expectedResult>NOT_APPLICABLE</expectedResult>
							  <expression>
							   let $THEMES_TITLE := 'GEMET - INSPIRE themes, version 1.0'
							   let $recordsToInspect := $records[gmd:hierarchyLevel/gmd:MD_ScopeCode/@codeListValue = ('dataset','series') and gmd:identificationInfo[1]/*/gmd:descriptiveKeywords/*/gmd:thesaurusName/*/gmd:title/*/text() = $THEMES_TITLE]
							   let $messages :=    
							   if (not($recordsToInspect)) then 
							   ()
							   else
							   try {    
							   let $officialInspireLanguages := ('bg','cs','da','de','et','el','en','es','fr','hr','it','lv','lt','hu','mt','nl','pl','pt','ro','sk','sl','fi','sv')
							   let $inspireThemesCodeListURL := 'http://inspire.ec.europa.eu/theme'
							   let $codeTitles := local:get-code-titles($inspireThemesCodeListURL,$officialInspireLanguages)
							   let $codeValues := local:get-code-list-values($inspireThemesCodeListURL)
							   let $codes := ($codeTitles,$codeValues)
							   return
							   (for $record in $recordsToInspect
							   let $rid := $record/gmd:fileIdentifier/*/text()
							   let $relevantDescriptiveKeywordsBlocks := $record/gmd:identificationInfo[1]/*/gmd:descriptiveKeywords/*[gmd:thesaurusName/*/gmd:title/*/text() = $THEMES_TITLE]
							   return 
							   if($relevantDescriptiveKeywordsBlocks[not(some $keyword in ./gmd:keyword/*/text() satisfies $keyword = $codes) ]) then
							   local:addMessage('TR.noKeywordFromINSPIREThemes',  map { 'filename': local:filename($record), 'id': $rid, 'url': $inspireThemesCodeListURL })
							   else
							   ()
							   )[position() le $limitErrors]
							   } catch * {       
							   local:addMessage('TR.systemError',  map { 'text': $err:description }) 
							   }
							   return
							   (if ($messages) then 'FAILED' else 'PASSED',
							   local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
							   $messages)
							  </expression>
							  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
							  <translationTemplates>
							   <translationTemplate ref="TR.noKeywordFromINSPIREThemes"/>
							   <translationTemplate ref="TR.recordsWithErrors"/>
							  </translationTemplates>
							 </TestAssertion>
							 <TestAssertion id="EIDf55fae32-c30a-4fa6-9ef4-201d5fa4d02f">
							  <label>md-iso.ds: Dataset language</label>
							  <description><![CDATA[If the type of the resource is dataset or series, a resource language must be given.<br/><br/>
This test case only applies to records with a hierarchyLevel value 'dataset' or 'series'.<br/><br/>
The test first checks if a gmd:LanguageCode object is given (inside gmd:identificationInfo), containing a codeListValue attribute with a valid 3-letter language code (one of the values of enumeration type languageISO6392B in http://inspire.ec.europa.eu/schemas/common/1.0/common.xsd): 'bul','hrv','cze','dan','dut','eng','est','fin','fre','ger','gre','hun','gle','ita','lav','lit','mlt','pol','por','rum','slo','slv','spa','swe').<br/><br/>
Relevant requirements:
<ul>
<li>TG MD Requirement 8: The resource language is mandated by ISO 19115.</li>
<li>TG MD Requirement 9: The resource language has to be filled with a value from the codelist ISO/TS 19139 based on alpha-3 codes of ISO 639-2.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/metadata/1.3/iso-19115-19119/ds-language" target="_blank">Abstract Test Case 'Dataset language'</a>]]></description>
							  <parent ref="EID0422a7f2-4ec7-4a75-9667-38f265ea4545"/>
							  <expectedResult>NOT_APPLICABLE</expectedResult>
							  <expression>
							   let $recordsToInspect := $records[gmd:hierarchyLevel/gmd:MD_ScopeCode/@codeListValue = ('dataset','series')]
							   let $messages :=    
							   if (not($recordsToInspect)) then 
							   ()
							   else
							   (for $record in $recordsToInspect    
							   let $rid := $record/gmd:fileIdentifier/*/text()
							   let $languageCodes := $record/gmd:identificationInfo[1]/*/gmd:language/gmd:LanguageCode
							   let $codes := ('bul','hrv','cze','dan','dut','eng','est','fin','fre','ger','gre','hun','gle','ita','lav','lit','mlt','pol','por','rum','slo','slv','spa','swe')
							   return
							   if (not($languageCodes)) then
							   local:addMessage('TR.noLanguageCode',  map { 'filename': local:filename($record), 'id': $rid })
							   else 
							   let $wrongCodeValues := $languageCodes/@codeListValue[not(. = $codes)]
							   return
							   if ($wrongCodeValues) then
							   local:addMessage('TR.invalidLanguageCode',  map { 'filename': local:filename($record), 'id': $rid, 'invalidCodes' : string-join($wrongCodeValues) })
							   else 
							   ()     
							   )[position() le $limitErrors]
							   
							   return
							   (if ($messages) then 'FAILED' else 'PASSED',
							   local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
							   $messages)
							  </expression>
							  <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
							  <translationTemplates>
							   <translationTemplate ref="TR.noLanguageCode"/>
							   <translationTemplate ref="TR.invalidLanguageCode"/>
							   <translationTemplate ref="TR.recordsWithErrors"/>
							  </translationTemplates>
							 </TestAssertion>
								<TestAssertion id="EIDbab97b1b-4ffe-4ac7-be22-16d10e3ed3dd">
									<label>md-iso.ds: Dataset linkage</label>
									<description><![CDATA[This test checks each resource locator URL to see if it is syntactically correct and if the resource it references can be accessed, in order to determine its type. If the referenced resource is recognized as a Network Service, it checks whether the linkage to the dataset is declared and implemented.<br/><br/>
This test case only applies to records with a hierarchyLevel value 'dataset' or 'series'.<br/><br/>
The test checks if a linkage is provided. If none is given, the test will complete successfully. If one or more are provided, for each linkage the test checks:
<ul>
<li>if the linkage element contains an element of type gmd:URL.</li>
<li>if the element content is a syntactically correct URL.</li>
<li>if the referenced resource is accessible.</li>
<li>if the response identifies the linkage as a known Harmonised Spatial Data Service type or a Network Service type, the test checks if appropriate linkage to dataset is available. The linkage is established via the Metadata URL for WMS, WFS and Atom based services. Otherwise a final manual test is suggested to the tester (to test if any of the linkages points to a webpage with further instructions or a client application that directly accesses the service).</li>
</ul>
Relevant requirements:
<ul>
<li>TG Requirement 3: If a linkage for data is available, the Resource Locator shall be a valid URL providing one of the following: a link to a web with further instructions, a link to a service capabilities document, a link to the service WSDL document (SOAP Binding), a link to a client application that directly accesses the service.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/metadata/1.3/iso-19115-19119/ds-linkage" target="_blank">Abstract Test Case 'Dataset linkage'</a>]]></description>
									<parent ref="EID0422a7f2-4ec7-4a75-9667-38f265ea4545"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $levels := ('dataset', 'series')
let $recordsToInspect := $records[gmd:hierarchyLevel/gmd:MD_ScopeCode/@codeListValue = $levels and gmd:distributionInfo/*/gmd:transferOptions/*/gmd:onLine/*/gmd:linkage]
let $messages := (for $record in $recordsToInspect
  let $rid := $record/gmd:fileIdentifier/*/text()
  let $urls := $record/gmd:distributionInfo/*/gmd:transferOptions/*/gmd:onLine/*/gmd:linkage/gmd:URL/text()
  return
  if (not($urls)) then
    local:addMessage('TR.linkageWithoutURL', map { 'filename': local:filename($record), 'id': $rid })
  else
  for $url in $urls
    let $validuri := try { local:check-resource-uri($url, 30) } catch * { false() }
    return
    if ($validuri = 'notHTTP') then
	   local:addMessage('TR.urlNotHttp', map { 'filename': local:filename($record), 'id': $rid, 'url': $url })
    else if ($validuri = 'TIMEOUT') then
		local:addMessage('TR.resourceNotAccessibleTimeout', map { 'filename': local:filename($record), 'id': $rid, 'url': $url, 'timeout': '30' })
    else if (matches($validuri,'\d{3}')) then
		local:addMessage('TR.resourceNotAccessible', map { 'filename': local:filename($record), 'id': $rid, 'url': $url, 'status' : $validuri })
    else if (starts-with($validuri,'text/xml') or starts-with($validuri,'application/xml') or starts-with($validuri,'application/vnd.ogc.')) then
      try { 
      	let $root := fn:doc($url)/element()
        	return
        	if ($root[self::wfs:WFS_Capabilities or self::wms:WMS_Capabilities or self::atom:feed]) then ()
			else local:addMessage('TR.unknownXMLResource', map { 'filename': local:filename($record), 'id': $rid, 'url': $url, 'elementName': local-name($root), 'namespace': namespace-uri($root) }) 
		} catch * { 
			local:addMessage('TR.resourceNotAccessibleException', map { 'filename': local:filename($record), 'id': $rid, 'url': $url, 'message': $err:description })
      }
    else
       local:addMessage('TR.unknownResourceType', map { 'filename': local:filename($record), 'id': $rid, 'url': $url, 'mediaType': $validuri }))[position() le $limitErrors]
return
	(if ($messages//@ref = ('TR.linkageWithoutURL','TR.resourceNotAccessible')) then 'FAILED' else if ($messages) then 'PASSED_MANUAL' else 'PASSED',
	 local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
	 $messages)
									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.recordsWithErrors"/>
										<translationTemplate ref="TR.linkageWithoutURL"/>
										<translationTemplate ref="TR.urlNotHttp"/>
										<translationTemplate ref="TR.resourceNotAccessibleTimeout"/>
										<translationTemplate ref="TR.resourceNotAccessible"/>
										<translationTemplate ref="TR.unknownXMLResource"/>
										<translationTemplate ref="TR.unknownResourceType"/>
									</translationTemplates>
								</TestAssertion>
							 
							</testAssertions>
						</TestStep>
					</testSteps>
				</TestCase>
			 <TestCase id="EID32301fad-c617-47a7-b07c-3c5f45802349">
			  <label>Service tests</label>
			  <description>Execute tests that apply for all service metadata records.</description>
			  <parent ref="EID4c5d8006-3ac6-43d9-a1a3-1e19bf163ff3"/>
			  <dependencies>
			   <testCase ref="EID31c568d6-1073-4ff5-a5b2-f0e6b9683177"/>
			  </dependencies>
			  <testSteps>
			   <TestStep id="EID1c897122-b9cc-4d27-806e-e527630a23b1">
			    <label>IGNORE</label>
			    <description>IGNORE</description>
			    <parent ref="EID32301fad-c617-47a7-b07c-3c5f45802349"/>
			    <statementForExecution>not applicable</statementForExecution>
			    <testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
			    <testAssertions>
			     <TestAssertion id="EID6ae07702-e063-43a4-bf3f-c0d29696bcd2">
			      <label>md-iso.srv: Coupled resource</label>
			      <description><![CDATA[If the resource is a spatial data service, this metadata element refers to the target spatial data set(s) of the service. It is implemented by reference, i.e. through a URL that points to the metadata record of the data on which the service operates.<br/><br/>
This test case only applies to records with a hierarchyLevel value 'service'.<br/><br/>
The operatesOn element in the SV_ServiceIdentification element should be a HTTP URI that when retrieved using HTTP GET should return the metadata document describing the dataset exposed by this service (i.e. the resource must be a metadata record with a hierarchyLevel 'dataset' or 'series').<br/><br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/metadata/1.3/iso-19115-19119/coupled-resource" target="_blank">Abstract Test Case 'Coupled resource'</a>]]></description>
			      <parent ref="EID1c897122-b9cc-4d27-806e-e527630a23b1"/>
			      <expectedResult>NOT_APPLICABLE</expectedResult>
			      <expression>
			       let $recordsToInspect := $records[gmd:hierarchyLevel/gmd:MD_ScopeCode/@codeListValue = 'service' and gmd:identificationInfo/srv:SV_ServiceIdentification/srv:operatesOn]
			       let $messages := (for $record in $recordsToInspect
			       let $rid := $record/gmd:fileIdentifier/*/text()
			       let $urls := $record/gmd:identificationInfo/srv:SV_ServiceIdentification/srv:operatesOn/@xlink:href
			       return  
			       if (not($urls)) then
			       local:addMessage('TR.operatesOnWithoutXlink', map { 'filename': local:filename($record), 'id': $rid })
			       else
			       for $url in $urls
			       let $validuri := try { local:check-resource-uri($url, 30) } catch * { false() }
			       return
			       if ($validuri = 'notHTTP') then
			       local:addMessage('TR.urlNotHttp', map { 'filename': local:filename($record), 'id': $rid, 'url': $url })
			       else if ($validuri = 'TIMEOUT') then
			       local:addMessage('TR.resourceNotAccessibleTimeout', map { 'filename': local:filename($record), 'id': $rid, 'url': $url })
			       else if (matches($validuri,'\d{3}')) then
			       local:addMessage('TR.resourceNotAccessible', map { 'filename': local:filename($record), 'id': $rid, 'url': $url, 'status' : $validuri })
			       else if (starts-with($validuri,'text/xml') or starts-with($validuri,'application/xml') or starts-with($validuri,'application/vnd.ogc.')) then
			       try { 
			       let $root := fn:doc($url)/element()
			       return
			       if ($root[gmd:hierarchyLevel/gmd:MD_ScopeCode/@codeListValue = ('dataset','series')]) then ()
			       else local:addMessage('TR.operatesOnWithoutDatasetOrSeriesRecord', map { 'filename': local:filename($record), 'id': $rid, 'url': $url }) 
			       } catch * { 
			       local:addMessage('TR.resourceNotAccessibleTimeout', map { 'filename': local:filename($record), 'id': $rid, 'url': $url })
			       }
			       else
			       local:addMessage('TR.unknownResourceType', map { 'filename': local:filename($record), 'id': $rid, 'url': $url, 'mediaType': $validuri }))[position() le $limitErrors]
			       return
			       (if ($messages//@ref = ('TR.operatesOnWithoutXlink','TR.resourceNotAccessible','TR.resourceNotAccessibleTimeout','TR.urlNotHttp','TR.operatesOnWithoutDatasetOrSeriesRecord','TR.unknownResourceType')) then 'FAILED' else 'PASSED',
			       local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
			       $messages)
			      </expression>
			      <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
			      <translationTemplates>
			       <translationTemplate ref="TR.operatesOnWithoutXlink"/>			       
			       <translationTemplate ref="TR.urlNotHttp"/>
			       <translationTemplate ref="TR.resourceNotAccessibleTimeout"/>
			       <translationTemplate ref="TR.resourceNotAccessible"/>			       
			       <translationTemplate ref="TR.operatesOnWithoutDatasetOrSeriesRecord"/>
			       <translationTemplate ref="TR.unknownResourceType"/>
			       <translationTemplate ref="TR.recordsWithErrors"/>
			      </translationTemplates>
			     </TestAssertion>			   
			     <TestAssertion id="EID74984e66-5f25-4250-bea4-46c97c08910c">
			      <label>md-iso.srv: Service keyword</label>
			      <description><![CDATA[This test checks that each service metadata record has a keyword that defines the category of the service.<br/><br/>
This test case only applies to records with a hierarchyLevel value 'service'.<br/><br/>
If the resource is a service, at least one keyword must originate from <a href="http://inspire.ec.europa.eu/metadata-codelist/SpatialDataServiceCategory">EU commission regulation No. 1205/2008, Annex part D, No. 4</a>.<br/><br/>
Relevant requirement(s):
<ul>
<li>TG Requirement 15: For spatial services, the keyword:
<ul>
<li>shall at least define the category or subcategory of the service using its language neutral name as defined in Part D 4 of the INSPIRE Metadata Regulation 1205/2008/EC</li>
<li>shall be expressed as neutral language values such as the neutral language values defined in Part D.4 of the INSPIRE Metadata Regulation 1205/2008/EC for spatial data services)</li>
</ul>
</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/metadata/1.3/iso-19115-19119/srv-keyword" target="_blank">Abstract Test Case 'Service keyword'</a>]]></description>
			      <parent ref="EID1c897122-b9cc-4d27-806e-e527630a23b1"/>
			      <expectedResult>NOT_APPLICABLE</expectedResult>
			      <expression>
			       let $recordsToInspect := $records[gmd:hierarchyLevel/gmd:MD_ScopeCode/@codeListValue = 'service']
			       let $messages :=    
			       if (not($recordsToInspect)) then 
			       ()
			       else
			       try {
			       let $spatialDataServiceCategoriesCodeListURL := 'http://inspire.ec.europa.eu/metadata-codelist/SpatialDataServiceCategory'
			       let $codes := local:get-code-list-values($spatialDataServiceCategoriesCodeListURL)
			       return
			       (for $record in $recordsToInspect
			       let $rid := $record/gmd:fileIdentifier/*/text()
			       let $keywords := $record/gmd:identificationInfo[1]/*/gmd:descriptiveKeywords/*/gmd:keyword/*/text()
			       return
			       if(not(some $keyword in $keywords satisfies $keyword = $codes)) then
			       local:addMessage('TR.noKeywordFromSpatialDataServiceCategory',  map { 'filename': local:filename($record), 'id': $rid, 'url': $spatialDataServiceCategoriesCodeListURL })
			       else
			       ()
			       )[position() le $limitErrors]
			       } catch * {       
			       local:addMessage('TR.systemError',  map { 'text': $err:description }) 
			       }
			       return
			       (if ($messages//@ref = ('TR.noKeywordFromSpatialDataServiceCategory','TR.systemError')) then 'FAILED' else 'PASSED',
			       local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
			       $messages)
			      </expression>
			      <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
			      <translationTemplates>
			       <translationTemplate ref="TR.noKeywordFromSpatialDataServiceCategory"/>			       
			       <translationTemplate ref="TR.systemError"/>
			       <translationTemplate ref="TR.recordsWithErrors"/>
			      </translationTemplates>
			     </TestAssertion>			 
			     <TestAssertion id="EIDc56edb44-6ad0-42f8-9c42-b34caa635f70">
			      <label>md-iso.srv: Service type</label>
			      <description><![CDATA[This test checks if each service metadata record has exactly one name describing the type of the service.<br/><br/>
If the type of the resource is service, exactly one name describing the type of service must be given. First, a check is performed to establish whether the serviceType element occurs exactly once in the document. The test then checks if the element serviceType contains text that equals one of the types given in <a href="http://inspire.ec.europa.eu/metadata-codelist/SpatialDataServiceType">EU commission regulation No. 1205/2008, Annex part D, No. 3</a>.<br/><br/>
Relevant requirement(s):
<ul>
<li>TG Requirement 12: Use language neutral name from table in 1.3.1.</li>
</ul>
Source: <a href="http://inspire.ec.europa.eu/id/ats/metadata/1.3/iso-19115-19119/srv-type" target="_blank">Abstract Test Case 'Service type'</a>]]></description>
			      <parent ref="EID1c897122-b9cc-4d27-806e-e527630a23b1"/>
			      <expectedResult>NOT_APPLICABLE</expectedResult>
			      <expression>
			       let $recordsToInspect := $records[gmd:hierarchyLevel/gmd:MD_ScopeCode/@codeListValue = 'service']
			       let $messages :=    
			       if (not($recordsToInspect)) then 
			       ()
			       else
			       let $spatialDataServiceTypeCodeListURL := 'http://inspire.ec.europa.eu/metadata-codelist/SpatialDataServiceType'
			       let $codes := ('discovery','view','download','transformation','invoke','other')
			       return
			       (for $record in $recordsToInspect
			       let $rid := $record/gmd:fileIdentifier/*/text()
			       let $type := $record/gmd:identificationInfo/*/srv:serviceType/*/text()
			       return
			       if(not(count($type) = 1)) then
			       local:addMessage('TR.exactlyOneServiceType', map { 'filename': local:filename($record), 'id': $rid })
			       else if(not($type = $codes)) then
			       local:addMessage('TR.noTypeFromSpatialDataServiceType',  map { 'filename': local:filename($record), 'id': $rid, 'url': $spatialDataServiceTypeCodeListURL })
			       else
			       ()
			       )[position() le $limitErrors]
			       return
			       (if ($messages//@ref = ('TR.exactlyOneServiceType','TR.noTypeFromSpatialDataServiceType','TR.systemError')) then 'FAILED' else 'PASSED',
			       local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
			       $messages)
			      </expression>
			      <testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
			      <translationTemplates>
			       <translationTemplate ref="TR.exactlyOneServiceType"/>			       
			       <translationTemplate ref="TR.noTypeFromSpatialDataServiceType"/>
			       <translationTemplate ref="TR.recordsWithErrors"/>
			      </translationTemplates>
			     </TestAssertion>			  
			    </testAssertions>
			   </TestStep>
			  </testSteps>
			 </TestCase>
			</testCases>
		</TestModule>
	</testModules>
</ExecutableTestSuite>
